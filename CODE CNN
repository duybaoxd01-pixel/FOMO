| CNN cơ bản                   | FOMO                                        |
| ---------------------------- | ------------------------------------------- |
| Dự đoán 1 nhãn cho toàn ảnh  | Dự đoán **nhiều đối tượng trong ảnh**       |
| Đầu ra: vector lớp (softmax) | Đầu ra: **bản đồ nhiệt (heatmap)**          |
| Dữ liệu: mỗi ảnh 1 nhãn      | Dữ liệu: mỗi ảnh có nhiều tọa độ (centroid) |
| Mục tiêu: phân loại          | Mục tiêu: **phát hiện vị trí**              |



"""
cnn_basic.py
Mô hình CNN cơ bản dùng cho bài toán phân loại ảnh (classification)
Giải thích theo phương pháp Feynman.
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import DataLoader
from tqdm import tqdm

# -------------------------------
# 1️⃣ TẠO MÔ HÌNH CNN
# -------------------------------
class SimpleCNN(nn.Module):
    """
    Cấu trúc:
    - Conv1: lọc cạnh và chi tiết nhỏ
    - Pool1: giảm kích thước, loại nhiễu
    - Conv2: học hình dạng phức tạp hơn
    - Pool2: giảm kích thước lần nữa
    - FC1 + FC2: học quan hệ toàn cục để phân loại
    """
    def __init__(self, num_classes=10):
        super(SimpleCNN, self).__init__()

        # Ảnh đầu vào có 3 kênh màu (RGB)
        self.conv1 = nn.Conv2d(in_channels=3, out_channels=16, kernel_size=3, stride=1, padding=1)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv2 = nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3, stride=1, padding=1)

        # Sau 2 lần pooling, kích thước giảm 4 lần (32x32 -> 8x8 nếu input là 32x32)
        self.fc1 = nn.Linear(32 * 8 * 8, 128)
        self.fc2 = nn.Linear(128, num_classes)

    def forward(self, x):
        # Bước 1: Convolution + ReLU
        x = F.relu(self.conv1(x))          # [B,16,H,W]
        x = self.pool(x)                   # [B,16,H/2,W/2]

        # Bước 2: Convolution + Pooling lần 2
        x = F.relu(self.conv2(x))          # [B,32,H/2,W/2]
        x = self.pool(x)                   # [B,32,H/4,W/4]

        # Bước 3: Flatten (trải phẳng tensor để đưa vào fully connected)
        x = x.view(x.size(0), -1)          # [B, 32*8*8]

        # Bước 4: Fully Connected + ReLU
        x = F.relu(self.fc1(x))

        # Bước 5: Lớp cuối cùng (softmax sẽ được tính trong loss)
        x = self.fc2(x)
        return x


# -------------------------------
# 2️⃣ TẠO DỮ LIỆU
# -------------------------------
def load_data(batch_size=64):
    transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.ToTensor(),
        transforms.Normalize((0.5, 0.5, 0.5),
                             (0.5, 0.5, 0.5))
    ])

    # Dùng dataset CIFAR10 (10 lớp: máy bay, ô tô, chim, mèo, hươu, chó, ếch, ngựa, tàu, xe tải)
    trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                            download=True, transform=transform)
    trainloader = DataLoader(trainset, batch_size=batch_size, shuffle=True)

    testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                           download=True, transform=transform)
    testloader = DataLoader(testset, batch_size=batch_size, shuffle=False)
    return trainloader, testloader


# -------------------------------
# 3️⃣ HÀM HUẤN LUYỆN
# -------------------------------
def train_cnn(model, trainloader, optimizer, criterion, device):
    model.train()
    running_loss = 0.0
    for images, labels in tqdm(trainloader, desc="Training"):
        images, labels = images.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
    return running_loss / len(trainloader)


# -------------------------------
# 4️⃣ HÀM ĐÁNH GIÁ
# -------------------------------
def evaluate(model, testloader, device):
    model.eval()
    correct, total = 0, 0
    with torch.no_grad():
        for images, labels in tqdm(testloader, desc="Evaluating"):
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
    acc = 100 * correct / total
    return acc


# -------------------------------
# 5️⃣ CHƯƠNG TRÌNH CHÍNH
# -------------------------------
def main():
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    print(f"Using device: {device}")

    num_classes = 10
    model = SimpleCNN(num_classes).to(device)

    criterion = nn.CrossEntropyLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
    trainloader, testloader = load_data(batch_size=128)

    EPOCHS = 10
    for epoch in range(EPOCHS):
        train_loss = train_cnn(model, trainloader, optimizer, criterion, device)
        acc = evaluate(model, testloader, device)
        print(f"Epoch {epoch+1}/{EPOCHS} | Loss: {train_loss:.4f} | Test Acc: {acc:.2f}%")

    torch.save(model.state_dict(), "cnn_basic.pth")
    print("✅ Đã lưu mô hình vào cnn_basic.pth")

if __name__ == "__main__":
    main()
